{"mappings":"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","sources":["src/utilities.js","src/sudokuGenerator.js","src/index.js","src/sudoku.js"],"sourcesContent":["export const GRID_SIZE = 9;\nexport const BOX_SIZE = 3;\n\nexport function convertIndexToPosition(index) {\n  return {\n    row: Math.floor(index / GRID_SIZE),\n    //   остаток от деления номера ячейки на 9:\n    column: index % GRID_SIZE,\n  };\n}\n\nexport function convertPositionToIndex(row, column) {\n  return row * GRID_SIZE + column;\n}\n","import { GRID_SIZE, BOX_SIZE } from './utilities.js';\n\nexport function generateSudoku() {\n  const sudoku = createEmptyGrid();\n  resolveSudoku(sudoku);\n  //   console.table(sudoku);\n  // возвращаем незаполненную сетку для игры:\n  return removeCells(sudoku);\n}\n\n// создаем 9 массивов и заполняем каждый из них массивом из 9\nfunction createEmptyGrid() {\n  return new Array(GRID_SIZE).fill().map(() => new Array(GRID_SIZE).fill(null));\n}\n\n// Заполняет двухмерный массив числами, чтоб получилась корректная сетка судоку\nfunction resolveSudoku(grid) {\n  // находим пустую ячейку\n  const emptyCell = findEmptyCell(grid);\n  //Eсли не находим пустую ячейку, таблица заполнена:\n  if (!emptyCell) return true;\n\n  const numbers = getRandomNumbers();\n\n  // рекурсия\n  for (let i = 0; i < numbers.length; i++) {\n    if (!validate(grid, emptyCell.row, emptyCell.column, numbers[i])) continue;\n\n    grid[emptyCell.row][emptyCell.column] = numbers[i];\n\n    if (resolveSudoku(grid)) return true;\n\n    grid[emptyCell.row][emptyCell.column] = null;\n  }\n}\n\nexport function findEmptyCell(grid) {\n  for (let row = 0; row < GRID_SIZE; row++) {\n    for (let column = 0; column < GRID_SIZE; column++) {\n      if (grid[row][column] === null) return { row, column };\n    }\n  }\n  // Если нет пустых ячеек:\n  return null;\n}\n\nfunction getRandomNumbers() {\n  // создаем упорядоченный массив:\n  const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\n  // перемешиваем массив:\n  for (let i = numbers.length - 1; i >= 0; i--) {\n    const randomIndex = Math.floor(Math.random() * (i + 1));\n    [numbers[i], numbers[randomIndex]] = [numbers[randomIndex], numbers[i]];\n  }\n\n  return numbers;\n}\n\nfunction validate(grid, row, column, value) {\n  return (\n    validateColumn(grid, row, column, value) &&\n    validateRow(grid, row, column, value) &&\n    validateBox(grid, row, column, value)\n  );\n}\n\nfunction validateColumn(grid, row, column, value) {\n  // пробегаемся по всем строкам в столбце, кроме ячейки row, в которую вписываем значение.\n  // iRow - индекс прoверяемой строки\n  for (let iRow = 0; iRow < GRID_SIZE; iRow++) {\n    if (grid[iRow][column] === value && iRow !== row) return false;\n  }\n  return true;\n}\n\nfunction validateRow(grid, row, column, value) {\n  for (let iColumn = 0; iColumn < GRID_SIZE; iColumn++) {\n    if (grid[row][iColumn] === value && iColumn !== column) return false;\n  }\n  return true;\n}\n\n//Чтоб получить координаты внутреннего верхнего левого квадрата, нужно найти смещение от среднего нижнего квардата.\n//  Чтоб вычислить смещение, нужно получить остаток от деления координат нижней ячейки на размер маленького квадрата\nfunction validateBox(grid, row, column, value) {\n  const firstRowInBox = row - (row % BOX_SIZE);\n  const firstColumnInBox = column - (column % BOX_SIZE);\n\n  for (let iRow = firstRowInBox; iRow < firstRowInBox + BOX_SIZE; iRow++) {\n    for (\n      let iColumn = firstColumnInBox;\n      iColumn < firstColumnInBox + BOX_SIZE;\n      iColumn++\n    ) {\n      if (grid[iRow][iColumn] === value && iRow !== row && iColumn !== column)\n        return false;\n    }\n  }\n  return true;\n}\n\nfunction removeCells(grid) {\n  // количество заполняемых ячеек\n  const DIFFICULTY = 30;\n  const resultGrid = [...grid].map(row => [...row]);\n\n  let i = 0;\n  while (i < DIFFICULTY) {\n    let row = Math.floor(Math.random() * GRID_SIZE);\n    let column = Math.floor(Math.random() * GRID_SIZE);\n    if (resultGrid[row][column] !== null) {\n      resultGrid[row][column] = null;\n      i++;\n    }\n  }\n  //   console.table(resultGrid);\n  return resultGrid;\n}\n","// import { generateSudoku } from './sudokuGenerator.js';\n\n// generateSudoku();\nimport { Sudoku } from './sudoku.js';\nimport {\n  GRID_SIZE,\n  BOX_SIZE,\n  convertIndexToPosition,\n  convertPositionToIndex,\n} from './utilities.js';\n\nconst sudoku = new Sudoku();\nlet cells;\nlet selectedCellIndex;\nlet selectedCell;\ninit();\n\nfunction init() {\n  initCells();\n  initNumbers();\n  initRemover();\n  initKeyEvent();\n}\n\nfunction initCells() {\n  cells = document.querySelectorAll('.cell');\n  fillCells();\n  initCellsEvent();\n}\n\nfunction fillCells() {\n  for (let i = 0; i < GRID_SIZE * GRID_SIZE; i++) {\n    const { row, column } = convertIndexToPosition(i);\n\n    if (sudoku.grid[row][column] !== null) {\n      cells[i].classList.add('filled');\n      cells[i].innerHTML = sudoku.grid[row][column];\n    }\n  }\n}\n\nfunction initCellsEvent() {\n  cells.forEach((cell, index) => {\n    cell.addEventListener('click', () => onCellClick(cell, index));\n  });\n}\n\nfunction onCellClick(clickedCell, index) {\n  cells.forEach(cell =>\n    cell.classList.remove('highlighted', 'selected', 'error')\n  );\n\n  if (clickedCell.classList.contains('filled')) {\n    selectedCellIndex = null;\n    selectedCell = null;\n  } else {\n    selectedCellIndex = index;\n    selectedCell = clickedCell;\n    clickedCell.classList.add('selected');\n    highlightCellsBy(index);\n  }\n  // выделение ячеек с таким числом, как выбрали\n  if (clickedCell.innerHTML === '') return;\n  cells.forEach(cell => {\n    if (cell.innerHTML === clickedCell.innerHTML)\n      cell.classList.add('selected');\n  });\n}\n\nfunction highlightCellsBy(index) {\n  highlightColumnBy(index);\n  highlightRowBy(index);\n  highlightBoxBy(index);\n}\n\nfunction highlightColumnBy(index) {\n  const column = index % GRID_SIZE;\n  for (let row = 0; row < GRID_SIZE; row++) {\n    const cellIndex = convertPositionToIndex(row, column);\n    cells[cellIndex].classList.add('highlighted');\n  }\n}\n\nfunction highlightRowBy(index) {\n  const row = Math.floor(index / GRID_SIZE);\n  for (let column = 0; column < GRID_SIZE; column++) {\n    const cellIndex = convertPositionToIndex(row, column);\n    cells[cellIndex].classList.add('highlighted');\n  }\n}\n\nfunction highlightBoxBy(index) {\n  const column = index % GRID_SIZE;\n  const row = Math.floor(index / GRID_SIZE);\n  const firstRowInBox = row - (row % BOX_SIZE);\n  const firstColumnInBox = column - (column % BOX_SIZE);\n\n  for (let iRow = firstRowInBox; iRow < firstRowInBox + BOX_SIZE; iRow++) {\n    for (\n      let iColumn = firstColumnInBox;\n      iColumn < firstColumnInBox + BOX_SIZE;\n      iColumn++\n    ) {\n      const cellIndex = convertPositionToIndex(iRow, iColumn);\n      cells[cellIndex].classList.add('highlighted');\n    }\n  }\n}\n\nfunction initNumbers() {\n  const numbers = document.querySelectorAll('.number');\n  numbers.forEach(number => {\n    number.addEventListener('click', () =>\n      //из строки делаем число:\n      onNumberClick(parseInt(number.innerHTML))\n    );\n  });\n}\n\nfunction onNumberClick(number) {\n  if (!selectedCell) return;\n  if (selectedCell.classList.contains('filled')) return;\n\n  cells.forEach(cell =>\n    cell.classList.remove('error', 'zoom', 'shake', 'selected')\n  );\n  selectedCell.classList.add('selected');\n  setValueInSelectedCell(number);\n\n  if (!sudoku.hasEmptyCells()) {\n    setTimeout(() => winAnimation(), 500);\n  }\n}\n\nfunction setValueInSelectedCell(value) {\n  // индекс выделенной ячейки преобразовываем в row и column:\n  const { row, column } = convertIndexToPosition(selectedCellIndex);\n  //  Находим все дубликаты числа, которые пытаемся добавить:\n  const duplicatesPositions = sudoku.getDuplicatePositions(row, column, value);\n  if (duplicatesPositions.length) {\n    highlightDuplicates(duplicatesPositions);\n    return;\n  }\n  // когда дубликатов нет:\n  sudoku.grid[row][column] = value;\n  selectedCell.innerHTML = value;\n  setTimeout(() => selectedCell.classList.add('zoom'), 0);\n}\n\nfunction highlightDuplicates(duplicatesPositions) {\n  duplicatesPositions.forEach(duplicate => {\n    const index = convertPositionToIndex(duplicate.row, duplicate.column);\n    setTimeout(() => cells[index].classList.add('error', 'shake'), 0);\n  });\n}\n\n// удаление значений из ячеек\nfunction initRemover() {\n  const remover = document.querySelector('.remove');\n  remover.addEventListener('click', () => onRemoveClick());\n}\n\nfunction onRemoveClick() {\n  if (!selectedCell) return;\n  if (selectedCell.classList.contains('filled')) return;\n\n  cells.forEach(cell =>\n    cell.classList.remove('error', 'zoom', 'shake', 'selected')\n  );\n  selectedCell.classList.add('selected');\n  const { row, column } = convertIndexToPosition(selectedCellIndex);\n  selectedCell.innerHTML = '';\n  sudoku.grid[row][column] = null;\n}\n\n// Нажатие цифр с клавиатуры\nfunction initKeyEvent() {\n  document.addEventListener('keydown', event => {\n    if (event.key === 'Backspace') {\n      onRemoveClick();\n    } else if (event.key >= '1' && event.key <= '9') {\n      onNumberClick(parseInt(event.key));\n    }\n  });\n}\n","import { GRID_SIZE, BOX_SIZE } from './utilities.js';\nimport { generateSudoku, findEmptyCell } from './sudokuGenerator.js';\n\nexport class Sudoku {\n  constructor() {\n    this.grid = generateSudoku();\n  }\n\n  getDuplicatePositions(row, column, value) {\n    const duplicatesInColumn = this.getDuplicatePositionsInColumn(\n      row,\n      column,\n      value\n    );\n    const duplicatesInRow = this.getDuplicatePositionsInRow(row, column, value);\n    const duplicatesInBox = this.getDuplicatePositionsInBox(row, column, value);\n\n    const duplicates = [...duplicatesInColumn, ...duplicatesInRow];\n    duplicatesInBox.forEach(duplicateInBox => {\n      if (duplicateInBox.row !== row && duplicateInBox.column !== column)\n        duplicates.push(duplicateInBox);\n    });\n\n    return duplicates;\n  }\n\n  getDuplicatePositionsInColumn(row, column, value) {\n    const duplicates = [];\n    for (let iRow = 0; iRow < GRID_SIZE; iRow++) {\n      if (this.grid[iRow][column] === value && iRow !== row) {\n        duplicates.push({ row: iRow, column });\n      }\n    }\n    return duplicates;\n  }\n\n  getDuplicatePositionsInRow(row, column, value) {\n    const duplicates = [];\n    for (let iColumn = 0; iColumn < GRID_SIZE; iColumn++) {\n      if (this.grid[row][iColumn] === value && iColumn !== column) {\n        duplicates.push({ row, column: iColumn });\n      }\n    }\n    return duplicates;\n  }\n\n  getDuplicatePositionsInBox(row, column, value) {\n    const duplicates = [];\n    const firstRowInBox = row - (row % BOX_SIZE);\n    const firstColumnInBox = column - (column % BOX_SIZE);\n\n    for (let iRow = firstRowInBox; iRow < firstRowInBox + BOX_SIZE; iRow++) {\n      for (\n        let iColumn = firstColumnInBox;\n        iColumn < firstColumnInBox + BOX_SIZE;\n        iColumn++\n      ) {\n        if (\n          this.grid[iRow][iColumn] === value &&\n          iRow !== row &&\n          iColumn !== column\n        ) {\n          duplicates.push({ row: iRow, column: iColumn });\n        }\n      }\n    }\n    return duplicates;\n  }\n\n  hasEmptyCells() {\n    return Boolean(findEmptyCell(this.grid));\n  }\n}\n"],"names":["$90e5cb5c8ce09e64$export$e18527aea31077fa","index","row","Math","floor","column","$90e5cb5c8ce09e64$export$7317a16deca464c2","$b9fc7efa03c4c4a5$export$16a0abb3798cc10f","sudoku","Array","fill","map","$b9fc7efa03c4c4a5$var$resolveSudoku","grid","DIFFICULTY","resultGrid","i","random","$b9fc7efa03c4c4a5$var$removeCells","emptyCell","$b9fc7efa03c4c4a5$export$d7e13cd139187350","numbers","length","randomIndex","$b9fc7efa03c4c4a5$var$getRandomNumbers","$b9fc7efa03c4c4a5$var$validate","value","iRow","$b9fc7efa03c4c4a5$var$validateColumn","iColumn","$b9fc7efa03c4c4a5$var$validateRow","firstRowInBox","firstColumnInBox","$b9fc7efa03c4c4a5$var$validateBox","$1f0dc3b9307be026$var$sudoku","getDuplicatePositions","duplicatesInColumn","this","getDuplicatePositionsInColumn","duplicatesInRow","getDuplicatePositionsInRow","duplicatesInBox","getDuplicatePositionsInBox","duplicates","forEach","duplicateInBox","push","hasEmptyCells","Boolean","constructor","$1f0dc3b9307be026$var$cells","$1f0dc3b9307be026$var$selectedCellIndex","$1f0dc3b9307be026$var$selectedCell","$1f0dc3b9307be026$var$onNumberClick","number","classList","contains","cell","remove","add","duplicatesPositions","duplicate","setTimeout","$1f0dc3b9307be026$var$highlightDuplicates","innerHTML","$1f0dc3b9307be026$var$setValueInSelectedCell","winAnimation","$1f0dc3b9307be026$var$onRemoveClick","document","querySelectorAll","$1f0dc3b9307be026$var$fillCells","addEventListener","clickedCell","cellIndex","$1f0dc3b9307be026$var$highlightColumnBy","$1f0dc3b9307be026$var$highlightRowBy","$1f0dc3b9307be026$var$highlightBoxBy","$1f0dc3b9307be026$var$highlightCellsBy","$1f0dc3b9307be026$var$onCellClick","parseInt","querySelector","event","key"],"version":3,"file":"index.abf631a1.js.map"}