{"mappings":"AAEO,SAASA,IACd,MAAMC,EASC,IAAIC,MCZY,GDYKC,OAAOC,KAAI,IAAM,IAAIF,MCZ1B,GDY2CC,KAAK,QALpC,OAHnCE,EAAcJ,GAkGhB,SAAqBK,GACnB,MAAMC,EAAa,GACbC,EAAa,IAAIF,GAAMF,KAAIK,GAAO,IAAIA,KAE5C,IAAIC,EAAI,EACR,KAAOA,EAAIH,GAAY,CACrB,IAAIE,EAAME,KAAKC,MC5GM,ED4GAD,KAAKE,UACtBC,EAASH,KAAKC,MC7GG,ED6GGD,KAAKE,UACG,OAA5BL,EAAWC,GAAKK,KAClBN,EAAWC,GAAKK,GAAU,KAC1BJ,I,CAIJ,OAAOF,C,CA7GAO,CAAYd,E,CAS8C,SAA1DI,EAAcC,GAEF,MAAbU,EAAYC,EAAcX,GAEQ,IAAnCU,EAAW,OAAO,EAEvB,MAAME,EAwBR,WAE4B,MAApBA,EAAU,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAGvB,IAAb,IAAIR,EAAIQ,EAAQC,OAAS,EAAGT,GAAK,EAAGA,IAAK,CAC5C,MAAMU,EAAcT,KAAKC,MAAMD,KAAKE,UAAYH,EAAI,KACnDQ,EAAQR,GAAIQ,EAAQE,IAAgB,CAACF,EAAQE,GAAcF,EAAQR,G,CAGtE,OAAOQ,C,CAlCSG,GAGR,IAAH,IAAIX,EAAI,EAAGA,EAAIQ,EAAQC,OAAQT,IAClC,GAAKY,EAAShB,EAAMU,EAAUP,IAAKO,EAAUF,OAAQI,EAAQR,IAA7D,CAIA,GAFAJ,EAAKU,EAAUP,KAAKO,EAAUF,QAAUI,EAAQR,GAE5CL,EAAcC,GAAO,OAAO,EAEhCA,EAAKU,EAAUP,KAAKO,EAAUF,QAAU,IAN0B,C,CAU/D,SAASG,EAAcX,GAC5B,IAAK,IAAIG,EAAM,EAAGA,ECrCK,EDqCYA,IACjC,IAAK,IAAIK,EAAS,EAAGA,ECtCA,EDsCoBA,IACvC,GAA0B,OAAtBR,EAAKG,GAAKK,GAAkB,MAAO,C,IAAEL,E,OAAKK,GAIhC,OAAX,I,CAgBT,SAASQ,EAAShB,EAAMG,EAAKK,EAAQS,GACnC,OAOF,SAAwBjB,EAAMG,EAAKK,EAAQS,GAGnB,IAAjB,IAAIC,EAAO,EAAGA,ECtEI,EDsEcA,IACnC,GAAIlB,EAAKkB,GAAMV,KAAYS,GAASC,IAASf,EAAK,OAAO,EAE3D,OAAO,C,CAZLgB,CAAenB,EAAMG,EAAKK,EAAQS,IAetC,SAAqBjB,EAAMG,EAAKK,EAAQS,GACtC,IAAK,IAAIG,EAAU,EAAGA,EC7EC,ED6EoBA,IACzC,GAAIpB,EAAKG,GAAKiB,KAAaH,GAASG,IAAYZ,EAAQ,OAAO,EAEjE,OAAO,C,CAlBLa,CAAYrB,EAAMG,EAAKK,EAAQS,IAuBnC,SAAqBjB,EAAMG,EAAKK,EAAQS,GACtC,MAAMK,EAAgBnB,EAAOA,ECrFP,EDsFhBoB,EAAmBf,EAAUA,ECtFb,EDwFtB,IAAK,IAAIU,EAAOI,EAAeJ,EAAOI,ECxFhB,EDwF0CJ,IAC9D,IACE,IAAIE,EAAUG,EACdH,EAAUG,EC3FQ,ED4FlBH,IAEA,GAAIpB,EAAKkB,GAAME,KAAaH,GAASC,IAASf,GAAOiB,IAAYZ,EAC/D,OAAO,EAGb,OAAO,C,CApCLgB,CAAYxB,EAAMG,EAAKK,EAAQS,E,CE1DpB,ICHR,MAKLQ,gBACE,OAAOC,QAAQf,EAAcgB,KAAK3B,M,CALpC4B,cACED,KAAK3B,KAAON,G","sources":["src/sudokuGenerator.js","src/utilities.js","src/index.js","src/sudoku.js"],"sourcesContent":["import { GRID_SIZE, BOX_SIZE } from './utilities.js';\n\nexport function generateSudoku() {\n  const sudoku = createEmptyGrid();\n  resolveSudoku(sudoku);\n  //   console.table(sudoku);\n  // возвращаем незаполненную сетку для игры:\n  return removeCells(sudoku);\n}\n\n// создаем 9 массивов и заполняем каждый из них массивом из 9\nfunction createEmptyGrid() {\n  return new Array(GRID_SIZE).fill().map(() => new Array(GRID_SIZE).fill(null));\n}\n\n// Заполняет двухмерный массив числами, чтоб получилась корректная сетка судоку\nfunction resolveSudoku(grid) {\n  // находим пустую ячейку\n  const emptyCell = findEmptyCell(grid);\n  //Eсли не находим пустую ячейку, таблица заполнена:\n  if (!emptyCell) return true;\n\n  const numbers = getRandomNumbers();\n\n  // рекурсия\n  for (let i = 0; i < numbers.length; i++) {\n    if (!validate(grid, emptyCell.row, emptyCell.column, numbers[i])) continue;\n\n    grid[emptyCell.row][emptyCell.column] = numbers[i];\n\n    if (resolveSudoku(grid)) return true;\n\n    grid[emptyCell.row][emptyCell.column] = null;\n  }\n}\n\nexport function findEmptyCell(grid) {\n  for (let row = 0; row < GRID_SIZE; row++) {\n    for (let column = 0; column < GRID_SIZE; column++) {\n      if (grid[row][column] === null) return { row, column };\n    }\n  }\n  // Если нет пустых ячеек:\n  return null;\n}\n\nfunction getRandomNumbers() {\n  // создаем упорядоченный массив:\n  const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\n  // перемешиваем массив:\n  for (let i = numbers.length - 1; i >= 0; i--) {\n    const randomIndex = Math.floor(Math.random() * (i + 1));\n    [numbers[i], numbers[randomIndex]] = [numbers[randomIndex], numbers[i]];\n  }\n\n  return numbers;\n}\n\nfunction validate(grid, row, column, value) {\n  return (\n    validateColumn(grid, row, column, value) &&\n    validateRow(grid, row, column, value) &&\n    validateBox(grid, row, column, value)\n  );\n}\n\nfunction validateColumn(grid, row, column, value) {\n  // пробегаемся по всем строкам в столбце, кроме ячейки row, в которую вписываем значение.\n  // iRow - индекс прoверяемой строки\n  for (let iRow = 0; iRow < GRID_SIZE; iRow++) {\n    if (grid[iRow][column] === value && iRow !== row) return false;\n  }\n  return true;\n}\n\nfunction validateRow(grid, row, column, value) {\n  for (let iColumn = 0; iColumn < GRID_SIZE; iColumn++) {\n    if (grid[row][iColumn] === value && iColumn !== column) return false;\n  }\n  return true;\n}\n\n//Чтоб получить координаты внутреннего верхнего левого квадрата, нужно найти смещение от среднего нижнего квардата.\n//  Чтоб вычислить смещение, нужно получить остаток от деления координат нижней ячейки на размер маленького квадрата\nfunction validateBox(grid, row, column, value) {\n  const firstRowInBox = row - (row % BOX_SIZE);\n  const firstColumnInBox = column - (column % BOX_SIZE);\n\n  for (let iRow = firstRowInBox; iRow < firstRowInBox + BOX_SIZE; iRow++) {\n    for (\n      let iColumn = firstColumnInBox;\n      iColumn < firstColumnInBox + BOX_SIZE;\n      iColumn++\n    ) {\n      if (grid[iRow][iColumn] === value && iRow !== row && iColumn !== column)\n        return false;\n    }\n  }\n  return true;\n}\n\nfunction removeCells(grid) {\n  const DIFFICULTY = 30;\n  const resultGrid = [...grid].map(row => [...row]);\n\n  let i = 0;\n  while (i < DIFFICULTY) {\n    let row = Math.floor(Math.random() * GRID_SIZE);\n    let column = Math.floor(Math.random() * GRID_SIZE);\n    if (resultGrid[row][column] !== null) {\n      resultGrid[row][column] = null;\n      i++;\n    }\n  }\n  //   console.table(resultGrid);\n  return resultGrid;\n}\n","export const GRID_SIZE = 9;\nexport const BOX_SIZE = 3;\n","// import { generateSudoku } from './sudokuGenerator.js';\n\n// generateSudoku();\nimport { Sudoku } from './sudoku.js';\n\nconst sudoku = new Sudoku();\n\n// console.table(sudoku.grid);\n","import { generateSudoku, findEmptyCell } from './sudokuGenerator.js';\n\nexport class Sudoku {\n  constructor() {\n    this.grid = generateSudoku();\n  }\n\n  hasEmptyCells() {\n    return Boolean(findEmptyCell(this.grid));\n  }\n}\n"],"names":["$b9fc7efa03c4c4a5$export$16a0abb3798cc10f","sudoku","Array","fill","map","$b9fc7efa03c4c4a5$var$resolveSudoku","grid","DIFFICULTY","resultGrid","row","i","Math","floor","random","column","$b9fc7efa03c4c4a5$var$removeCells","emptyCell","$b9fc7efa03c4c4a5$export$d7e13cd139187350","numbers","length","randomIndex","$b9fc7efa03c4c4a5$var$getRandomNumbers","$b9fc7efa03c4c4a5$var$validate","value","iRow","$b9fc7efa03c4c4a5$var$validateColumn","iColumn","$b9fc7efa03c4c4a5$var$validateRow","firstRowInBox","firstColumnInBox","$b9fc7efa03c4c4a5$var$validateBox","hasEmptyCells","Boolean","this","constructor"],"version":3,"file":"index.7b83a79a.js.map"}